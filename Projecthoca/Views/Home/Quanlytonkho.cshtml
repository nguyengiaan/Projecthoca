@{
    ViewData["Title"] = "Báo cáo tồn kho ";
    ViewData["SelectedDay"]=0;
}


<div class="inventory-report">
    <h2 class="report-title">@ViewData["Title"]</h2>
    
    <div class="filters">
        <div class="filter-group">
            <label for="fromDate">Từ tháng:</label>
            <input type="month" id="fromDate" name="fromDate" class="form-control" disabled>
        </div>
        
        <div class="filter-group">
            <label for="toDate">Đến ngày:</label>
            <select id="toDate" name="toDate" class="form-control" disabled >
                @* @for (int i = 1; i <= 31; i++)
                {
                    <option value="@i">@i</option>
                    ViewData["SelectedDay"]=@i;
                } *@
            </select>
        </div>
        
        <div class="filter-group">
            <label for="productCode">Mã sản phẩm:</label>
            <input type="text" id="productCode" name="productCode" class="form-control">
        </div>
        
        <div class="actions">
            <button id="printBtn" class="btn btn-secondary"><i class="fas fa-print"></i> In ấn</button>
        </div>
    </div>
    
    <div class="data-grid">
        <table class="table table-striped table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Mã sản phẩm</th>
                    <th>Tên sản phẩm</th>

                    @* @{
                        
                        var selectedDay = Convert.ToInt32(ViewData["SelectedDay"] ?? "31");
                        for (int i = 1; i <= selectedDay; i++)
                        {
                            <th>@i</th>
                        }
                    } *@
                </tr>
            </thead>
            <tbody id="tblbody">
                <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript hoặc Razor -->
            </tbody>
            <tfoot id="pagination">

            </tfoot>
        </table>
    </div>
</div>

<style>
    .inventory-report {
        font-family: 'Roboto', sans-serif;
        padding: 30px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .report-title {
        color: #343a40;
        margin-bottom: 30px;
        text-align: center;
        font-weight: bold;
    }

    .filters {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 30px;
        justify-content: space-between;
        align-items: flex-end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-group label {
        display: block;
        margin-bottom: 5px;
        color: #495057;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .actions {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }

    .data-grid {
        overflow-x: auto;
        margin-top: 30px;
    }

    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
  
    }

  

    .table th, .table td {
        padding: 12px;
        vertical-align: middle;
        background-color:#ffffff;

    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
        border-color: #454d55;
     
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0,0,0,.05);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,.075);
    }
</style>

<script>
$(document).ready(function() {
    $('#productCode').on('keyup', function() {
          var value = $(this).val().toLowerCase();
            $("#tblbody tr").filter(function() {
                   $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
          });
       });
    $('#reportBtn').on('click', generateReport);
 $('#printBtn').on('click', function() {
                    var printWindow = window.open('', '_blank');
                    printWindow.document.write('<html><head><title>Báo cáo tồn kho</title>');
                    printWindow.document.write('<style>table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid black; padding: 8px; text-align: left; }</style>');
                    printWindow.document.write('</head><body>');
                    printWindow.document.write('<h1>Báo cáo tồn kho</h1>');
                    printWindow.document.write($('.table').prop('outerHTML'));
                    printWindow.document.write('</body></html>');
                    printWindow.document.close();
                    printWindow.print();
                });
    function generateReport() {
        console.log('Generating report...');
        // Implement report generation logic here
    }

    function printReport() {
        console.log('Printing report...');
        // Implement print functionality here
    }

    // Add event listener for select tag
    $('#toDate').on('change', function() {
        var selectedDay = parseInt(selectedValue);

        // Get table and header row
        var table = $('.table');
        var headerRow = table.find('thead tr');

        // Remove all current date columns
        headerRow.find('th:nth-child(n+5)').remove();

        // Add new columns based on selected day
        for (var i = 1; i <= selectedDay; i++) {
            var th = $('<th>').text(i);
            headerRow.append(th);
        }
        danhsachdanhmuc(1, 10, selectedDay);
        // Call function to filter data (if needed)
        filterData(selectedDay);
    });

    // Function to get last day of the current month
    function getLastDayOfCurrentMonth() {
        var today = new Date();
        return today.getDate();
    }

    // Function to update table with default days
    function updateTableWithDefaultDays() {
        var lastDay = getLastDayOfCurrentMonth();
        $('#toDate').val(lastDay);
       danhsachdanhmuc(1, 10, lastDay);
        // Update table
        updateTable(lastDay);
    }

    // Function to update the table
    function updateTable(selectedDay) {
        var table = $('.table');
        var headerRow = table.find('thead tr');

        // Remove all current date columns
        headerRow.find('th:nth-child(n+5)').remove();

        // Add new columns based on selected day
        for (var i = 1; i <= selectedDay; i++) {
            var th = $('<th>').text(i);
            headerRow.append(th);
        }
    }
    // Call function to set the current month when the page loads
    setCurrentMonth();
    // Add event listener for month input
    $('#fromDate').on('change', function() {
        var selectedMonth = $(this).val();
        console.log('Selected month:', selectedMonth);
        // You can add logic to handle the new month here
        // updateDataBasedOnMonth(selectedMonth);
    });
    // Function to set the current month
    function setCurrentMonth() {
        var today = new Date();
        var year = today.getFullYear();
        var month = (today.getMonth() + 1).toString().padStart(2, '0');
        var currentMonth = year + '-' + month;

        $('#fromDate').val(currentMonth);
    }
    // Function to update the number of days in the month
    function updateDaysInMonth() {
        var fromDate = $('#fromDate').val();
        var toDateSelect = $('#toDate');

        if (fromDate) {
            var year = parseInt(fromDate.split('-')[0]);
            var month = parseInt(fromDate.split('-')[1]);
            var daysInMonth = new Date(year, month, 0).getDate();

            // Clear all current options
            toDateSelect.empty();

            // Add new options based on the number of days in the month
            for (var i = 1; i <= daysInMonth; i++) {
                var option = $('<option>').val(i).text(i);
                toDateSelect.append(option);
            }

            // Update table with the new days
            updateTableWithDefaultDays();
        }
    }

    // Add event listener for month input to update days in month
    $('#fromDate').on('change', function() {
        updateDaysInMonth();
    });


    // Call updateDaysInMonth when the page loads
    updateDaysInMonth();

    // Fetch inventory data using AJAX
    function fetchInventoryData() {
        $.ajax({
            url: '/Home/GetInventoryData',
            type: 'GET',
            success: function(response) {
            },
            error: function(xhr, status, error) {
                console.error("Error fetching data:", error);
                alert("An error occurred while fetching the data. Please try again later.");
            }
        });
    }
});

function danhsachdanhmuc(page, pagesize, today) {
    $.ajax({
        type: "POST",
        url: "/Tonkho/TinhTonKhoNhieuNgay",
        data: { page: page, pagesize: pagesize, endDate: today },
        success: function (response) {
            $('#tblbody').empty();
            console.log(response.dsdm);
            if (response.success) {
                var productData = {};
                var totalDays = today; // Sử dụng trực tiếp tham số today

                // Nhóm dữ liệu theo sản phẩm
                $.each(response.dsdm, function (index, value) {
                    $.each(value, function(innerIndex, innerValue) {
                        if (!productData[innerValue.ma_danhmuc]) {
                            productData[innerValue.ma_danhmuc] = {
                                ten_danhmuc: innerValue.ten_danhmuc,
                                tonKho: new Array(totalDays).fill('') 
                            };
                        }
                        var day = index; // Chỉ số mảng bắt đầu từ 0
                        productData[innerValue.ma_danhmuc].tonKho[day] = innerValue.soLuongTon;
                 
                    });
                });
                // Hiển thị dữ liệu
                $.each(productData, function (ma_danhmuc, data) {
                    var str = `<tr>
                        <td>${ma_danhmuc}</td>
                        <td>${data.ten_danhmuc}</td>`;
                    const list = data.tonKho.filter(item => item !== null && item !== undefined && item.toString().trim() !== "");
                    list.forEach(function(tonKho) {
                        str += `<td>${tonKho}</td>`;
                    });
                    
                    str += '</tr>';
                    $('#tblbody').append(str);

                    // Thêm chức năng tìm kiếm
         
                });
                
                updatePagination(response.totalPages, today); // Sử dụng tham số page thay vì response.pageindex
            } else {
                Swal.fire({
                    title: "Thông báo lỗi",
                    text: response.message,
                    icon: "error"
                });
            }
        },
        error: function(xhr, status, error) {
            console.error("Lỗi khi tải dữ liệu:", error);
            Swal.fire({
                title: "Lỗi",
                text: "Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.",
                icon: "error"
            });
        }
    });
}

function updatePagination(totalPages, currentPage,today) {

    if (totalPages > 0) {
        var str = `<nav aria-label="Page navigation example">
                                                                                            <ul class="pagination">`;
        if (totalPages > 1) {
            if (currentPage > 1) {
                str += `<li class="page-item"><a class="page-link" href="javascript:void(0)" onclick="danhsachdanhmuc(${currentPage - 1}, 10,${today})">Previous</a></li>`;
            }
            for (let i = 1; i <= totalPages; i++) {
                if (currentPage === i) {
                    str += `<li class="page-item active"><a class="page-link" href="javascript:void(0)">${i}</a></li>`;
                } else {
                    str += `<li class="page-item"><a class="page-link" href="javascript:void(0)" onclick="danhsachdanhmuc(${currentPage - 1}, 10,${today})">${i}</a></li>`;
                }
            }
            if (currentPage < totalPages) {
                str += `<li class="page-item"><a class="page-link" href="javascript:void(0)" onclick="danhsachdanhmuc(${currentPage - 1}, 10,${today})">Next</a></li>`;
            }
        }
        str += `</ul></nav>`;
        $('#pagination').html(str);
    }
}
</script>
